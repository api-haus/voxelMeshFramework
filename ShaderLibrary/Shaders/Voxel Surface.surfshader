BEGIN_OPTIONS
//ShaderTarget "5.0"
END_OPTIONS

BEGIN_PROPERTIES
[BetterHeader(PBR)]
[NoScaleOffset] _Diffuse("Albedo&Height", 2DArray) = "white" {}
[NoScaleOffset] _NormalSAO("Normal&Smooth&AO", 2DArray) = "bump" {}
[NoScaleOffset] _EmissiveMetallic("Emissive&Metallic", 2DArray) = "black" {}
_NormalStrength("Normal Strength", Float) = 1.0
_EmissiveStrength("Emissive Strength", Float) = 1.0
[BetterHeader(Effects)]
[Toggle(_USE_FRESNEL)] _UseFresnel("Fresnel", Float) = 0
_FresnelPower("Fresnel Power", Range(0.5,16)) = 1.0
_FresnelStrength("Fresnel Strength", Range(0.01,2)) = 1.0
[BetterHeader(Sampling)]
[KeywordEnum(ONE, TWO, THREE)]_TEX_SAMPLE("Texture Samples", Float) = 0
_UVScale("UV Scale", Float) = 1.0
_BlendContrast("Blend Contrast", Range(0.5,8)) = 1.0
[BetterHeader(Blending)]
_MaterialContrast("Material Contrast", Range(0.5,8)) = 1.0
[BetterHeader(Displacement)]
[Toggle(_USE_VERTEX_DISPLACEMENT)] _VertexDisplacement("Vertex Displacement", Float) = 0
_VertexDisplacementStrength("Vertex Displacement Strength", Range(0,2.0)) = 1.0
_VertexDisplacementOffset("Vertex Displacement Offset", Range(0,2.0)) = 1.0
[Toggle(_USE_PARALLAX)] _UseParallax("Parallax", Float) = 0
_Parallax("Scale", Range(0.005, 0.08)) = 0.005
END_PROPERTIES

BEGIN_CBUFFER
half _NormalStrength;
half _EmissiveStrength;
half _FresnelPower;
half _FresnelStrength;
half _UVScale;
half _BlendContrast;
half _MaterialContrast;
half _VertexDisplacementStrength;
half _VertexDisplacementOffset;
half _Parallax;
END_CBUFFER

BEGIN_DEFINES
#pragma shader_feature_local _ _USE_VERTEX_DISPLACEMENT
#pragma shader_feature_local _ _USE_PARALLAX
#pragma shader_feature_local _ _USE_FRESNEL
#pragma shader_feature_local _ _TEX_SAMPLE_ONE _TEX_SAMPLE_TWO _TEX_SAMPLE_THREE
#define _WORLDSPACENORMAL 1
END_DEFINES

BEGIN_CODE
TEXTURE2D_ARRAY(_Diffuse);
SAMPLER(sampler_Diffuse);
TEXTURE2D_ARRAY(_NormalSAO);
SAMPLER(sampler_NormalSAO);
TEXTURE2D_ARRAY(_EmissiveMetallic);

// Use shared voxel surface implementation
#include "Packages/com.voxelmeshframework/ShaderLibrary/Shaders/VoxelSurface/VoxelSurface.hlsl"

void ModifyVertex(inout VertexData v, inout ExtraV2F d)
{
#if _USE_VERTEX_DISPLACEMENT
  kSampler s = (kSampler)0;

  int materialId = (int)(v.vertexColor.r * 255.0);

  s.gatherLOD(v.normal,TransformObjectToWorld(v.vertex));
  half height = s.sampleHeightLOD(materialId, 0, _Diffuse, sampler_Diffuse);
  v.vertex.xyz += v.normal * (height - .5 + _VertexDisplacementOffset) * _VertexDisplacementStrength;
  d.extraV2F0 = v.tangent;
#endif
}

void SurfaceFunction(inout Surface o, ShaderData d) {
  half3 outAlbedo;
  half outMetallic;
  half outSmoothness;
  half3 outEmission;
  half outOcclusion;
  half3 outNormal;

  voxel_surface_half(
      (half4)d.vertexColor,
      (half3)d.worldSpacePosition,
      (half3)d.worldSpaceNormal,
      (half3)d.tangentSpaceViewDir,
      outAlbedo,
      outMetallic,
      outSmoothness,
      outEmission,
      outOcclusion,
      outNormal);

  o.Albedo = outAlbedo;
  o.Metallic = outMetallic;
  o.Smoothness = outSmoothness;
  o.Emission = outEmission;
  o.Occlusion = outOcclusion;
  o.Normal = outNormal;
}

END_CODE

